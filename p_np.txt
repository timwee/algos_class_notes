SAT
---------------
- https://en.wikipedia.org/wiki/Cook%E2%80%93Levin_theorem
- https://en.wikipedia.org/wiki/Boolean_satisfiability_problem
- hard combinatorial problems can be reduced to SAT
- SAT can be reduced to 3-SAT
	- recall 3-SAT is a restriction on SAT to have all clauses have exactly 3 terms


Benchmarks
----------------
- http://www.cs.ubc.ca/~hoos/SATLIB/benchm.html
- http://www.qbflib.org/


SAT solvers
--------------
- https://www.quora.com/What-kind-of-algorithms-do-SAT-solvers-use
- Empirical Study of the Anatomy of Modern SatSolvers http://www.cs.toronto.edu/~fbacchus/csc2512/Lectures/2013Readings/Skallah_Empirical_Study_SAT_Solvers.pdf
- https://www.msoos.org/2016/03/memory-layout-of-clauses-in-minisat/
- http://fmv.jku.at/lingeling/
- https://www.aaai.org/Papers/JAIR/Vol32/JAIR-3214.pdf - SATzilla: Portfolio-based Algorithm Selection for SAT


####################################################################################
QSAT/QBF
--------------
- https://en.wikipedia.org/wiki/True_quantified_Boolean_formula
	- generalization of SAT, each term has a quantifier.

####################################################################################
TSP
--------------
- visit all nodes and return minimally
- O(n!), dynamic programming O(n^2 * 2^n)
- compare to MST. MST just needs to connect all vertices. TSP needs a route.

Heuristic Solutions
--------------
- there exists polynomial time algorithsm that are at most 2x of optimal route.


TSP solvers
--------------
- https://developers.google.com/optimization/routing/tsp#solving-tsps-with-or-tools





####################################################################################
Hamiltonian Cycle
-------------------
- path that visits each vertex exactly once
- compare to Eulerian cycle (visit every edge exactly once)
	- eulerian easy to check - degree of each vertex is even and connected
- graphs that hve hamiltonian cycles do not necessarily have eulerian cycles



####################################################################################
Longest path problem
------------------
- find a simple path from s to t that is at least b - longest path
- find a simple path from s to t that is at most b - shortest path





####################################################################################
Integer Linear Programming
------------------
- https://en.wikipedia.org/wiki/Integer_programming
- linear inequalities, require solution/variables to be integer values.

Solvers
---------
- https://developers.google.com/optimization/lp/glop


Reductions To ILP
---------
1. TSP
2. Vertex Cover
3. Set Packing
4. Boolean satisfiability

In practice
-------------
- Simplex
- ellipsoid



####################################################################################
Independent Set Problem
-------------------
- given a graph and budget b, select subsets of the graph where each subset is at least size b, and each subset is not connected to any other nodes in a different subset





####################################################################################







####################################################################################





####################################################################################